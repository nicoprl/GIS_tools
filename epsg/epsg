#!/usr/bin/python3

import os
import sys
import argparse
import logging
from typing import List, Tuple, Dict

try:
    import fiona
except ImportError as err_import:
    print("Error importing fiona")
    print(err_import)
    sys.exit(1)

try:
    import shapely
    from shapely.geometry import shape, box
except ImportError as err_import:
    print("Error importing shapely")
    print(err_import)
    sys.exit(1)

# logging
log = logging.getLogger()
log.setLevel(logging.DEBUG)
stream_handler = logging.StreamHandler()
stream_handler.setLevel(logging.INFO)
log.addHandler(stream_handler)

PROJS = {
    "4326": {"country": "World", "name": "WGS 84", "bbox": [-180.0000, -90.0000, 180.0000, 90.0000]},
    "4171": {"country": "France", "name": "RGF93", "bbox": [-9.6200, 41.1800, 10.3000, 51.5400]},
    "2154": {"country": "France", "name": "RGF 93 / Lambert 93", "bbox": [-357823.2365, 6037008.6939, 1313632.3628, 7230727.3772]},
    "3942": {"country": "France", "name": "RGF 93 / CC42", "bbox": [1296335.9393, 1100257.6521, 2254779.1544, 1331811.4895]},
    "3943": {"country": "France", "name": "RGF 93 / CC43", "bbox": [1302506.4384, 2100044.3184, 2093357.4402, 2322094.8666]},
    "3944": {"country": "France", "name": "RGF 93 / CC44", "bbox": [1308798.4230, 3100052.0968, 2087131.0906, 3322128.5732]},
    "3945": {"country": "France", "name": "RGF 93 / CC45", "bbox": [1351247.6083, 4098245.7319, 2080786.3812, 4321920.5102]},
    "3946": {"country": "France", "name": "RGF 93 / CC46", "bbox": [1270591.6480, 5097385.5589, 2027087.9253, 5325334.0729]},
    "3947": {"country": "France", "name": "RGF 93 / CC47", "bbox": [1112163.1498, 6100231.0759, 2071615.7622, 6338667.6413]},
    "3948": {"country": "France", "name": "RGF 93 / CC48", "bbox": [1092603.2215, 7102517.8254, 2100529.4893, 7341541.8099]},
    "3949": {"country": "France", "name": "RGF 93 / CC49", "bbox": [1104062.1794, 8102449.7137, 2092985.7591, 8341410.9019]},
    "3950": {"country": "France", "name": "RGF 93 / CC50", "bbox": [1338040.0982, 9100766.7009, 2085321.7705, 9324263.6899]},
    "27562": {"country": "France", "name": "NTF (Paris) / Lambert Centre France", "bbox": [50198.0586, 64100.6841, 1016966.9382, 373525.1009]},
    "27563": {"country": "France", "name": "NTF (Paris) / Lambert Sud France", "bbox": [262373.4731, 11755.1415, 1047663.1958, 364038.4062]},
    "27564": {"country": "France", "name": "NTF (Paris) / Lambert Corse", "bbox": [501997.4013, 111734.6001, 607585.0937, 309328.6374]},
    "27571": {"country": "France", "name": "NTF (Paris) / Lambert zone I", "bbox": [40063.0848, 1067022.9279, 1038149.3679, 1404377.9733]},
    "27572": {"country": "France", "name": "NTF (Paris) / Lambert zone II", "bbox": [-22841.3905, 1712212.6192, 1087335.9605, 2703971.1254]},
    "27573": {"country": "France", "name": "NTF (Paris) / Lambert zone III", "bbox": [262373.4731, 3011755.1415, 1047663.1958, 3364038.4062]},
    "27574": {"country": "France", "name": "NTF (Paris) / Lambert zone IV", "bbox": [501997.4013, 4111734.6001, 607585.0937, 4309328.6374]}
}

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", metavar="file", help="path to OGR file")
    parser.add_argument("-c", metavar="coordinates", help="Coordinates (x,y). Ex: -c 4.834324,45.771074")
    parser.add_argument("-distinct", metavar="field", help="get distinct values of field")
    parser.add_argument("-check", action="store_true", help="check geometry")
    args = parser.parse_args()

    if args.f is not None:
        x, y = get_center_coordinates(os.getcwd() + "/" + args.f)
    elif args.c is not None:
        try:
            x = float(args.c.split(',')[0])
            y = float(args.c.split(',')[1])
        except Exception as e:
            print('Error, check -c syntax (ex: -c 45.771074,4.834324)')
            print(e)
            sys.exit(1)
    else:
        print('Error, no argument provided')
        parser.print_help()
        sys.exit(1)

    epsgs = guess_epsg(PROJS, x, y)

    if len(epsgs) == 0:
        print('No match found in projs dict')
    else:
        print('Possible EPSG code(s):')
        for epsg in epsgs:
            print('{0}: {1} ({2})'.format(
                epsg, PROJS[epsg]["name"], PROJS[epsg]["country"]
            ))

    if args.f is not None:
        print()
        featureCount, geomType, bbox, driver, meta, champs = get_metadata(os.getcwd() + "/" + args.f)
        print('Driver: ', driver)
        print('Geom type: ', geomType)
        print('Count: ', featureCount)
        print('Bbox: ', bbox)

        if args.check:
            check_geom_validity(os.getcwd() + "/" + args.f)

        print()

        for key, value in champs.items():
            print(key, value)

        print()

        if args.distinct is not None:
            print("[{0}]".format(args.distinct))
            for v in get_distinct_values(os.getcwd() + "/" + args.f, champs, args.distinct):
                print(v)


def guess_epsg(PROJS:dict, x:float , y:float) -> List[str]:
    founds = []
    for epsg, definition in PROJS.items():
        xmin, ymin, xmax, ymax = definition["bbox"]
        if (
            int(x) in range(int(xmin),int(xmax))
        ) and (
            int(y) in range(int(ymin),int(ymax))
        ):
            founds.append(epsg)
    return founds


def get_center_coordinates(inputfn:str) -> Tuple[float, float]:
    with fiona.Env():
        try:
            fiona.open(inputfn)
        except fiona.errors.DriverError as err_fiona:
            print(err_fiona)
            sys.exit(1)
        else:
            with fiona.open(inputfn) as source:
                minx, miny, maxx, maxy = source.bounds
                polygon = box(minx, miny, maxx, maxy)
                return polygon.centroid.x, polygon.centroid.y


def get_metadata(inputfn: str) -> Tuple[int, str, Tuple[float], str, Dict[str, str], Dict[str, str]]:
    with fiona.Env():
        try:
            fiona.open(inputfn)
        except fiona.errors.DriverError as err_fiona:
            print(err_fiona)
            sys.exit(1)
        else:
            with fiona.open(inputfn) as source:
                try:
                    featureCount = len(source)
                    bbox = source.bounds
                    wkt_proj = source.crs_wkt
                    proj4_proj = source.crs
                    driver = source.driver
                    meta = source.meta
                    geomType = meta["schema"]["geometry"]
                    champs = meta["schema"]["properties"]

                    return featureCount, geomType, bbox, driver, meta, champs
                except Exception as e:
                    print(e)
                    sys.exit(1)


def get_distinct_values(inputfn:str, champs:dict, champ_cible:str) -> List[str]:
    distinct_values = []
    if not champ_cible in champs.keys():
        print("Error, field {} not found".format(champ_cible))
        sys.exit(1)
    with fiona.open(inputfn) as src:
        for key, feat in src.items():
            value = feat["properties"][champ_cible]
            if not feat["properties"][champ_cible] in distinct_values:
                distinct_values.append(value)
    return distinct_values


def check_geom_validity(inputfn:str) -> None:
    invalid_count = 0
    with fiona.open(inputfn) as src:
        for key, feat in src.items():
            properties = dict(feat["properties"])
            geom = shape(feat["geometry"])
            if not geom.is_valid:
                print("geom {0} is not valid ({1})".format(key, properties))
                invalid_count += 1
    if invalid_count == 0:
        print("No invalid geometries found")


if __name__ == '__main__':
    main()
